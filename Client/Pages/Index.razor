@page "/"
@using PondSharp.UserScripts
@using PondSharp.Client.Pond
@using System.Timers
@using System.Drawing
@inject HttpClient Http
<!-- ReSharper disable once InconsistentNaming -->
@inject IJSRuntime JSRuntime; 


<div class="container-fluid">
    <div class="row">
        <div class="col-auto">
            <PondCanvas @ref="_canvas" Width="@PondWidth" Height="@PondHeight" GridSize="@GridSize"></PondCanvas>
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="StartPond" disabled="@(!IsCompiled)">Start</button>
                <button class="btn btn-secondary" @onclick="CreateEntity" disabled="@(!IsCompiled)">Create Entity</button>
                <button class="btn btn-danger" @onclick="StopPond" disabled="@(!IsCompiled)">Stop</button>
            </div>
            <div>
                TPS: <span>@(Math.Ceiling(1000 / (_manager?.CurrentTickTime ?? 1)))</span><br />
                Entities: <span>@(_engine?.Entities.Count() ?? 0)</span>
            </div>
        </div>
        <div class="col">
            <div id="code-editor" class="w-100" style="height: 500px;"></div>
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="CompileSource" disabled="@(!_compilerReady)">Compile</button>
                <button class="btn btn-secondary" @onclick="Reset" disabled="@(!IsCompiled)">Reset</button>
            </div>
            <div style="font-family: monospace">@_output</div>
        </div>
    </div>
</div>

@code
{
    private string _output = "No Instance Loaded";
    private string _source = "";
    private CSharpClassCompiler _compiler;
    private bool _compilerReady;

    private PondEngine _engine;
    private PondCanvas _canvas;
    private PondManager _manager;
    
    const int GridSize = 2;
    const int PondWidth = 200;
    const int PondHeight = 200;
    
    private bool IsCompiled => _compiler?.HasAssembly ?? false;
    
    private readonly Random _random = new Random();
    
    private Timer _debugUpdateTimer = new Timer();

    protected override async Task OnInitializedAsync()
    {
        _debugUpdateTimer.Elapsed += (_,__) => StateHasChanged();
        var types = new List<Type>
        {
            typeof(object),
            typeof(AbstractEntity),
            typeof(System.Drawing.Color),
            typeof(Enumerable)
        };
        _compiler = await CSharpClassCompiler.Make(types, Http.BaseAddress);
        _compilerReady = true;
        _engine = new PondEngine(-PondWidth/2, PondWidth/2-1, -PondHeight/2, PondHeight/2-1);
        TryCreatePondManager();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await CreateEditor();
        TryCreatePondManager();
    }

    private void TryCreatePondManager()
    {
        if (_manager == null && _engine != null && _canvas != null)
        {
            _manager = new PondManager(_engine, _canvas);
        }
    }

    private async Task CreateEditor()
    {
        _source = await Http.GetStringAsync("user-scripts/sample.txt");
        await JSRuntime.InvokeVoidAsync("createEditor", "code-editor", "codeEditor");
        await JSRuntime.InvokeVoidAsync("codeEditor.setCode", _source);
    }

    private void CreateEntity()
    {
        for (var i = 0; i < 50; i++) 
            RealCreateEntity();
    }
    
    private void RealCreateEntity()
    {
        int ColorRnd(int min) => _random.Next(min) + (0xFF - min);
        var instance = _compiler.New<AbstractEntity>("PondSharp.Examples.ExampleEntity");
        instance.Initialize(
            Guid.NewGuid().ToString(),
            _engine, 
            _random.Next(-PondWidth/2, PondWidth/2-1), 
            _random.Next(-PondHeight/2, PondHeight/2-1),
            Color.FromArgb(ColorRnd(0x66), ColorRnd(0x66), ColorRnd(0x66)).ToArgb(),
            20);
        _engine.InsertEntity(instance);
    }

    private async Task CompileSource()
    {
        await Reset();
        
        try
        {
            _output = "Compiling";
            StateHasChanged();
            await Task.Delay(TimeSpan.FromMilliseconds(100));
            
            _source = await JSRuntime.InvokeAsync<string>("codeEditor.getCode");
            _compiler.Compile(_source);
            _output = "Ready";
            
            StateHasChanged();
        }
        catch (Exception e)
        {
            _output = e.Message;
            StateHasChanged();
        }
    }

    private async Task StartPond()
    {
        await _manager.Start();
        _debugUpdateTimer.Start();
        _output = "Running";
    }

    private async Task StopPond()
    {
        await _manager.Stop();
        _debugUpdateTimer.Stop();
        _output = "Running";
    }

    private async Task Reset()
    {
        foreach (var instance in _engine.Entities)
        {
            await _canvas.DestroyEntity(instance.Id);
        }
        _engine.ClearAllEntities();
        await StopPond();
    }


}
