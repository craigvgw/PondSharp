@page "/"
@using PondSharp.UserScripts
@using PondSharp.Client.Pond
@using PondSharp.Client.IDE
@using System.Timers
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container-fluid">
    <div class="row">
        <Header></Header>
    </div>
    <div class="row">
        <div class="col-auto" style="width: @(PondWidth * GridSize + 10)px">
            <PondCanvas @ref="_canvas" Width="@PondWidth" Height="@PondHeight" GridSize="@GridSize"></PondCanvas>
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="CompileSource" disabled="@(!_compilerReady)">Compile</button>
                <button class="btn btn-success" @onclick="StartPond" disabled="@(!IsCompiled || IsRunning)">Start</button>
                <button class="btn btn-warning" @onclick="StopPond" disabled="@(!IsRunning)">Stop</button>
                <button class="btn btn-danger" @onclick="Reset" disabled="@(!IsRunning)">Reset</button>
            </div>
            <div class="row">
                <div class="col">
                    @if (IsCompiled)
                    {
                        <h4>Create Entities</h4>
                        @foreach (var (type, name) in _availableEntityTypes)
                        {
                            
                            <div class="input-group">
                                <div class="input-group-prepend" title="@type">
                                    <span class="input-group-text">@name</span>
                                </div>
                                <input class="form-control" type="number" @bind="_countToCreate[type]" min="1" />
                                <div class="input-group-append">
                                    <button class="btn btn-info" @onclick="@(e => CreateEntity(type))">Create</button>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="col w-25">
                    <div>
                        <h4>Stats</h4>
                        <div style="font-family: monospace">@_output</div>
                        <div style="font-family: monospace">TPS: <span>@(Math.Ceiling(1000 / (_manager?.CurrentTickTime ?? 1)))</span></div>
                        <pre>@(_entityCountsByType)</pre>
                    </div>
                </div>
            </div>
        </div>
        <div class="col overflow-hidden">
            <IdeElement @ref="_ideElement"></IdeElement>
            @if (_errors.Count > 0)
            {
                <div class="pre-scrollable bg-warning">
                    @foreach (var error in _errors)
                    {
                        <div class="border-bottom">@error</div>
                    }
                </div>
            }
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col">
            <Information OnDoReset="@GetExampleScripts"></Information>
        </div>
    </div>
</div>

@code
{
    private string _output = "No Instance Loaded";
    private IList<string> _errors = new List<string>();
    private CSharpClassCompiler _compiler;
    private bool _compilerReady;

    private (string fullName, string name)[] _availableEntityTypes = new (string, string)[0];

    private string _entityCountsByType
    {
        get
        {
            if (_engine == null) return "";
            var typeCounts = _availableEntityTypes.ToDictionary(a => a.fullName, a => 0);
            typeCounts.Add("*Other", 0);
            foreach (var entity in _engine.Entities)
                typeCounts[entity.GetType().FullName ?? "*Other"]++;
            
            return string.Join('\n', 
                typeCounts
                    .Where(tc => tc.Value != 0)
                    .Select(typeCount => $"{typeCount.Key}: {typeCount.Value}")
            );
        }
    }

    private Dictionary<string, int> _countToCreate = new Dictionary<string, int>();

    private PondEngine _engine;
    private PondCanvas _canvas;
    private PondManager _manager;
    private IdeElement _ideElement;
    
    const int GridSize = 2;
    const int PondWidth = 300;
    const int PondHeight = 300;

    private bool IsCompiled => _compiler?.HasAssembly ?? false;
    private bool IsRunning => _manager?.IsRunning ?? false;
    
    private Timer _debugUpdateTimer = new Timer();

    protected override async Task OnInitializedAsync()
    {
        _debugUpdateTimer.Elapsed += (_,__) => StateHasChanged();
        var types = new List<Type>
        {
            typeof(object),
            typeof(AbstractEntity),
            typeof(System.Drawing.Color),
            typeof(Enumerable)
        };
        _compiler = await CSharpClassCompiler.Make(types, Http.BaseAddress).ConfigureAwait(false);
        _compilerReady = true;
        _engine = new PondEngine(-PondWidth/2, PondWidth/2-1, -PondHeight/2, PondHeight/2-1);
        TryCreatePondManager();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        
        TryCreatePondManager();
    }

    private void TryCreatePondManager()
    {
        if (_manager == null && _engine != null && _canvas != null)
        {
            _manager = new PondManager(_engine, _canvas);
        }
    }

    private async Task CreateEntity(string fullName)
    {
        for (var i = 0; i < _countToCreate[fullName]; i++) 
            RealCreateEntity(fullName);
        
        await LocalStorage.SetItemAsync($"ec-{fullName}", _countToCreate[fullName]).ConfigureAwait(false);
    }
    
    private void RealCreateEntity(string fullName)
    {
        _manager.InitializeAndCreateEntity(_compiler.New<AbstractEntity>(fullName));
    }

    private Task GetExampleScripts() =>
        _ideElement.GetExampleScripts();

    private async Task CompileSource()
    {
        await Reset().ConfigureAwait(false);

        try
        {
            await _ideElement.TriggerSave().ConfigureAwait(false);
            _output = "Compiling";
            _errors.Clear();
            StateHasChanged();
            await Task.Delay(TimeSpan.FromMilliseconds(100)).ConfigureAwait(false);
            _compiler.Compile(_ideElement.Sources);
            _availableEntityTypes = _compiler
                .AvailableInstances(typeof(IAbstractEntity))
                .Select(t => (t, t.Split('.').Last()))
                .ToArray();
            if (_availableEntityTypes.Length == 0) throw new Exception("No found classes which extend IAbstractEntity");
            _countToCreate.Clear();
            foreach (var (fullName, _) in _availableEntityTypes)
            {
                Console.WriteLine(fullName);
                if (await LocalStorage.ContainKeyAsync($"ec-{fullName}").ConfigureAwait(false))
                    _countToCreate.Add(fullName, await LocalStorage.GetItemAsync<int>($"ec-{fullName}").ConfigureAwait(false));
                else if (fullName == "PondSharp.Examples.Clustering")
                    _countToCreate.Add(fullName, 50);
                else
                    _countToCreate.Add(fullName, 10);

            }
            await StartPond().ConfigureAwait(false);
            StateHasChanged();
        }
        catch (CompileException e)
        {
            _errors = e.Errors.ToList();
            _output = "Compilation Failure";
            StateHasChanged();
        }
        catch (Exception e)
        {
            _errors = new List<string>(new[] {e.Message});
            _output = "Unknown Failure";
            StateHasChanged();
        }
    }

    private async Task StartPond()
    {
        await _manager.Start().ConfigureAwait(false);
        _debugUpdateTimer.Start();
        _output = "Running";
    }

    private async Task StopPond()
    {
        await _manager.Stop().ConfigureAwait(false);
        _debugUpdateTimer.Stop();
        _output = "Running";
    }

    private async Task Reset()
    {
        foreach (var instance in _engine.Entities)
        {
            await _canvas.DestroyEntity(instance.Id).ConfigureAwait(false);
        }
        _engine.ClearAllEntities();
    }

}
