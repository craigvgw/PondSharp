@page "/"
@using PondSharp.UserScripts
@using PondSharp.Client.Pond
@using PondSharp.Client.IDE
@using System.Timers
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="row">
        <Header></Header>
    </div>
    <div class="row">
        <div class="col-auto" style="max-width: @(_pondWidth * _gridSize + 10)px">
            <PondCanvas @ref="_canvas" Width="@_pondWidth" Height="@_pondHeight" GridSize="@_gridSize"></PondCanvas>
            @if (IsDebug)
            {
                <div class="row">
                    <div class="col">
                        <div class="input-group input-group-sm">
                            <input class="form-control" value="@_pondWidth" @onchange="@(e => SetPondWidth(Convert.ToInt32(e.Value)))" />
                            <input class="form-control" value="@_pondHeight" @onchange="@(e => SetPondHeight(Convert.ToInt32(e.Value)))" />
                            <input class="form-control" value="@_gridSize" @onchange="@(e => SetPondGrid(Convert.ToInt32(e.Value)))" />
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-auto">
                    <div class="btn-group bottom-tabs">
                        <button class="btn btn-primary" @onclick="CompileSource">Compile</button>
                        <button class="btn btn-success" @onclick="StartPond" disabled="@(!_ideElement?.IsCompiled ?? IsRunning)">Start</button>
                        <button class="btn btn-warning" @onclick="StopPond" disabled="@(!IsRunning)">Stop</button>
                        <button class="btn btn-danger" @onclick="Reset" disabled="@(!IsRunning)">Reset</button>
                    </div>
                </div>
                <div class="col text-monospace">
                    <span>@_output</span> | 
                    <span>TPS: <span>@(Math.Ceiling(1000 / (_manager?.CurrentTickTime ?? 1)))</span></span>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    @if (_availableEntityTypes.Any())
                    {
                        <hr />
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <button class="btn btn-outline-primary" 
                                        @onclick="@(e => CreateEntity(_selectedType))"
                                        disabled="@(!_ideElement.IsCompiled)">Create</button>
                            </div>
                            <input class="form-control input-count" type="number" @bind="_countToCreate[_selectedType]" min="1"/>
                            <select class="form-control" @bind="_selectedType">
                                @foreach (var (type, name) in _availableEntityTypes)
                                {
                                    <option value="@type">@name</option>
                                }
                            </select>
                            <div class="input-group-append">
                                <span class="input-group-text">Entities</span>
                            </div>
                        </div>
                    }
                    <pre>@(EntityCountsByType)</pre>
                </div>
            </div>
        </div>
        <div class="col overflow-hidden">
            <IdeElement @ref="_ideElement"></IdeElement>
            @if (_errors.Count > 0)
            {
                <div class="bg-warning">
                    @foreach (var error in _errors)
                    {
                        <div class="border-bottom">@error</div>
                    }
                </div>
            }
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col">
            <Information OnDoReset="@GetExampleScripts"></Information>
        </div>
    </div>
</div>

@code
{
#if DEBUG
        public const bool IsDebug = true;
#else
    public const bool IsDebug = false;
#endif

    private string _output = "No Instance Loaded";
    private IList<string> _errors = new List<string>();
    private string _selectedType = string.Empty;

    private (string fullName, string name)[] _availableEntityTypes = new (string, string)[0];
    
    private string EntityCountsByType
    {
        get
        {
            if (_engine == null) return "";
            var typeCounts = _availableEntityTypes.ToDictionary(a => a.fullName, a => 0);
            typeCounts.Add("*Other", 0);
            foreach (var entity in _engine.Entities)
                typeCounts[entity.GetType().FullName ?? "*Other"]++;
            
            return string.Join('\n', 
                typeCounts
                    .Where(tc => tc.Value != 0)
                    .Select(typeCount => $"{typeCount.Key}: {typeCount.Value}")
            );
        }
    }

    private readonly Dictionary<string, int> _countToCreate = new Dictionary<string, int>();

    private PondEngine _engine;
    private PondCanvas _canvas;
    private PondManager _manager;
    private IdeElement _ideElement;
    
    private int _gridSize = 2;
    private int _pondWidth = 400;
    private int _pondHeight = 300;

    private bool IsRunning => _manager?.IsRunning ?? false;
    
    private readonly Timer _debugUpdateTimer = new Timer(1000);

    protected override void OnInitialized()
    {
        _debugUpdateTimer.Elapsed += (_,__) => StateHasChanged();

        var size = ((IJSInProcessRuntime)JsRuntime).Invoke<int[]>("getSize");
        if (size.Length == 2)
        {
            _pondWidth = size[0] > 1200 ? size[0] / 2 / _gridSize : (size[0] - 100) / _gridSize;
            _pondHeight = (size[1] - 250) / _gridSize;
        }

        _engine = new PondEngine(-_pondWidth/2, _pondWidth/2-1, -_pondHeight/2, _pondHeight/2-1);
        TryCreatePondManager();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        TryCreatePondManager();
        if (_ideElement.IsCompiled)
            await ReadAssemblyInfo();
    }

    private async Task ReadAssemblyInfo()
    {
        _availableEntityTypes = _ideElement.GetTypeNamesOf(typeof(IEntity)).ToArray();
        if (_availableEntityTypes.Length == 0)
        {
            _selectedType = null;
            return;
        }
        
        if (!_availableEntityTypes.Select(a => a.fullName).Contains(_selectedType))
            _selectedType = _availableEntityTypes.First().fullName;
        
        _countToCreate.Clear();
        foreach (var (fullName, _) in _availableEntityTypes)
            if (await LocalStorage.ContainKeyAsync($"ec-{fullName}").ConfigureAwait(false))
                _countToCreate.Add(fullName, await LocalStorage.GetItemAsync<int>($"ec-{fullName}").ConfigureAwait(false));
            else
                _countToCreate.Add(fullName, 10);
    }

    private void SetPondWidth(int width)
    {
        if (_manager == null) return;
        _manager.Reset();
        _pondWidth = width;
        _engine.ChangeSize(-_pondWidth/2, _pondWidth/2-1, -_pondHeight/2, _pondHeight/2-1);
        StateHasChanged();
    }

    private void SetPondHeight(int height)
    {
        if (_manager == null) return;
        _manager.Reset();
        _pondHeight = height;
        _engine.ChangeSize(-_pondWidth/2, _pondWidth/2-1, -_pondHeight/2, _pondHeight/2-1);
        StateHasChanged();
    }

    private void SetPondGrid(int height)
    {
        if (_manager == null) return;
        _manager.Reset();
        _gridSize = height;
        StateHasChanged();
    }

    private void TryCreatePondManager()
    {
        if (_manager == null && _engine != null && _canvas != null)
        {
            _manager = new PondManager(_engine, _canvas);
        }
    }

    private async Task CreateEntity(string fullName)
    {
        for (var i = 0; i < _countToCreate[fullName]; i++) 
            RealCreateEntity(fullName);
        
        await LocalStorage.SetItemAsync($"ec-{fullName}", _countToCreate[fullName]).ConfigureAwait(false);
    }
    
    private void RealCreateEntity(string fullName)
    {
        _manager.InitializeAndCreateEntity(_ideElement.CreateInstance<AbstractEntity>(fullName));
    }

    private Task GetExampleScripts() =>
        _ideElement.GetExampleScripts();

    private async Task CompileSource()
    {
        Reset();

        try
        {
            _output = "Compiling";
            _errors.Clear();
            StateHasChanged();
            await Task.Delay(TimeSpan.FromMilliseconds(100)).ConfigureAwait(false);
            await _ideElement.Compile().ConfigureAwait(false);
            await ReadAssemblyInfo().ConfigureAwait(false);
            await StartPond().ConfigureAwait(false);
            StateHasChanged();
        }
        catch (CompileException e)
        {
            _errors = e.Errors.ToList();
            _output = "Compilation Failure";
            StateHasChanged();
        }
        catch (Exception e)
        {
            _errors = new List<string>(new[] {e.Message});
            _output = "Unknown Failure";
            StateHasChanged();
        }
    }

    private async Task StartPond()
    {
        await _manager.Start().ConfigureAwait(false);
        _debugUpdateTimer.Start();
        _output = "Running";
    }

    private async Task StopPond()
    {
        await _manager.Stop().ConfigureAwait(false);
        _debugUpdateTimer.Stop();
        _output = "Running";
    }

    private void Reset()
    {
        foreach (var instance in _engine.Entities)
        {
            _canvas.DestroyEntity(instance.Id);
        }
        _engine.ClearAllEntities();
    }

}
