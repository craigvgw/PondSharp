@page "/"
@using PondSharp.UserScripts
@using PondSharp.Client.Pond
@using PondSharp.Client.IDE
@using System.Timers
@using System.Reflection
@using System.Globalization
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="row">
        <Header></Header>
    </div>
    <div class="row">
        <div class="col @(_display != DisplayType.Initializing ? "d-none" : "")">
            <div class="jumbotron text-center">
              <h1 class="display-4">Please Wait</h1>
              <p class="lead">Initializing the compiler, and building intitial project.</p>
              <hr class="my-4">
              <p>This may take a few seconds, or much longer depending on the resources available.</p>
            </div>
        </div>
        <div class="col @(_display != DisplayType.Pond ? "d-none" : "")">
            <div class="row">
                <div class="col-auto">
                    @if (_engine is not null)
                    {
                        <PondCanvas @ref="_canvas" Width="@_pondWidth" Height="@_pondHeight" GridSize="@_gridSize"></PondCanvas>
                    }
                </div>
                <div class="col">
                    @if (_availableEntityTypes.Any())
                    {
                        <div class="btn-group-vertical mb-3" style="width: 100%">
                            @foreach (var type in _availableEntityTypes)
                            {
                                <button class="btn btn-outline-primary @(type == SelectedType ? "active" : "")" @onclick="@(() => SelectedType = type)">@type.ShortName</button>
                            }
                        </div>
                    }
                    @if (SelectedType != null && SelectedType.Adjustables.Count > 0)
                    {
                        <div class="adjustables">
                            @foreach (var adjustable in SelectedType.Adjustables)
                            {
                                <div class="form-group border-light border-bottom">
                                    <label class="form-label mb-0">@(adjustable.Name)</label><br />
                                    @if (adjustable.Type == typeof(double))
                                    {
                                        @switch(adjustable.Attribute.Type)
                                        {
                                            case InputType.FreeForm:
                                                <input class="form-control h-auto" type="number" @bind="adjustable.ValueAsDouble" step="@adjustable.Attribute.Step" min="@adjustable.Attribute.Min" max="@adjustable.Attribute.Max" />
                                                break;
                                            case InputType.Slider:
                                                <small>@(adjustable.ValueAsDouble)</small>
                                                <input class="form-control h-auto" type="range" @bind="adjustable.ValueAsDouble" step="@adjustable.Attribute.Step" min="@adjustable.Attribute.Min" max="@adjustable.Attribute.Max" />
                                                break;
                                            case InputType.RgbColorPicker:
                                                throw new("RGBColorPicker only valid on ints");
                                            default:
                                                throw new ArgumentOutOfRangeException();
                                        }
                                    }
                                    else
                                    {
                                        @switch (adjustable.Attribute.Type)
                                        {
                                            case InputType.FreeForm:
                                                <input class="form-control h-auto" type="number" @bind="adjustable.ValueAsInt" step="@adjustable.Attribute.Step" min="@adjustable.Attribute.Min" max="@adjustable.Attribute.Max" />
                                                break;
                                            case InputType.Slider:
                                                <small>@(adjustable.ValueAsInt)</small>
                                                <input class="form-control h-auto" type="range" @bind="adjustable.ValueAsInt" step="@adjustable.Attribute.Step" min="@adjustable.Attribute.Min" max="@adjustable.Attribute.Max" />
                                                break;
                                            case InputType.RgbColorPicker:
                                                <input class="mb-2 w-100" type="color" @bind="adjustable.ValueAsColorString" />
                                                break;
                                            default:
                                                throw new ArgumentOutOfRangeException();
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-auto bottom-tabs">
                    <div class="btn-group">
                        <button class="btn btn-success" @onclick="StartPond" disabled="@(!_ideElement?.IsCompiled ?? IsRunning)">Start</button>
                        <button class="btn btn-warning" @onclick="StopPond" disabled="@(!IsRunning)">Stop</button>
                        <button class="btn btn-danger" @onclick="Reset" disabled="@(!_ideElement?.IsCompiled)">Reset</button>
                    </div>
                </div>
                <div class="col-auto bottom-tabs">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text" id="btnGroupAddon">TPS</div>
                        </div>
                        <input class="form-control" min="1" max="1000" type="number" @bind-value="TickSpeed" style="width: 80px" />
                    </div>
                </div>
                <div class="col text-monospace text-center">
                    <span>@_output</span> |
                    <span>TPS: <span>@(Math.Ceiling(1000 / (_manager?.CurrentTickTime ?? 1)))</span></span> |
                    <span>Count: @(TotalEntities)</span>
                </div>
                <div class="col-auto">
                    <div class="btn-group">
                        <button class="btn btn-primary" @onclick="() => _display = DisplayType.Ide">Edit Code</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col @(_display != DisplayType.Ide ? "d-none" : "")">
            <IdeElement @ref="_ideElement" IsInitialized="@(IdeElementInitialized)"></IdeElement>
            <div class="row">
                <div class="col">
                    <button class="btn btn-primary" @onclick="@CompileSource">Compile</button>
                    <button class="btn btn-dark" @onclick="() => _display = DisplayType.Pond">Close</button>
                </div>
            </div>
            @if (_errors.Count > 0)
            {
                <div class="bg-warning text-light">
                    @foreach (var error in _errors)
                    {
                        <div class="border-bottom">@error</div>
                    }
                </div>
            }
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col">
            <Information OnDoReset="@GetExampleScripts"></Information>
        </div>
    </div>
</div>

@code
{
    private enum DisplayType {Initializing, Pond, Ide}

    private DisplayType _display = DisplayType.Initializing;
    private string _output = "No Instance Loaded";
    private IList<string> _errors = new List<string>();
    private AvailableEntityEntry _selectedEntity;
    private AvailableEntityEntry SelectedType
    {
        get => _selectedEntity;
        set { _selectedEntity = value; _ideElement.SelectedEntity = _selectedEntity?.FullName ?? ""; }
    }

    private AvailableEntityEntry[] _availableEntityTypes = Array.Empty<AvailableEntityEntry>();
    private readonly Dictionary<string, int> _countToCreate = new();

    private PondEngine _engine;
    private PondManager _manager;
    
    // Elements are assigned from blazor
#pragma warning disable 649
    private IdeElement _ideElement;
    private PondCanvas _canvas;
#pragma warning restore 649
    
    private int _gridSize = 6;
    private int _pondWidth = 400;
    private int _pondHeight = 300;

    private bool IsRunning => _manager?.IsRunning ?? false;
    private int TotalEntities => _engine?.TotalEntities ?? 0;
    
    private readonly Timer _debugUpdateTimer = new(1000);

    private double TickSpeed
    {
        get => Math.Round(1000.0/_manager?.TickSpeed ?? 0.0);
        set
        {
            if (_manager is not null) _manager.TickSpeed = 1000.0/value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _debugUpdateTimer.Elapsed += (_,_) => StateHasChanged();
        await SetSize();
        _engine = new(_pondWidth, _pondHeight);
        TryCreatePondManager();
    }

    private async Task SetSize()
    {
        var size = await JsRuntime.InvokeAsync<int[]>("getSize");
        if (size.Length == 2)
        {
            _pondWidth = (size[0] - 250) / _gridSize;
            _pondHeight = (size[1] - 250) / _gridSize;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jsInterface = new JsInterface(ResetPondManager);
            await JsRuntime.InvokeAsync<string>("bindWindowResize", DotNetObjectReference.Create(jsInterface));
        }
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        TryCreatePondManager();
        
        if (firstRender && _ideElement.IsCompiled)
            ReadAssemblyInfo();
    }

    private void IdeElementInitialized()
    {
        _display = DisplayType.Pond;
        ReadAssemblyInfo();
        StartPond();
        if (_ideElement.IsCompiled)
        {
            CreatedDefaultEntities();
        }
    }

    private void ReadAssemblyInfo()
    {
        var types = _ideElement.GetTypesOf(typeof(IEntity));

        _availableEntityTypes = types.Select(type =>
        {
            var defaults = type.GetCustomAttribute<PondDefaultsAttribute>() ?? new();
            var adjustables = new List<AdjustableEntry>();
            var cType = type;
            while (cType is not null)
            {
                var currentType = cType;
                adjustables.AddRange(currentType.GetProperties(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public)
                    .SelectMany(property => property
                        .GetCustomAttributes<PondAdjustableAttribute>()
                        .Where(a => currentType == type || a.Inheritable)
                        .Select(attribute => new AdjustableEntry()
                        {
                            PropertyInfo = property,
                            Attribute = attribute
                        })
                    ));
                cType = cType.BaseType;
            }

            return new AvailableEntityEntry
            {
                Type = type,
                Defaults = defaults,
                FullName = type.FullName,
                ShortName = defaults.Name ?? type.FullName?.Split('.').Last(),
                Adjustables = adjustables,
            };
        }).ToArray();

        if (_availableEntityTypes.Length == 0)
        {
            SelectedType = null;
            return;
        }
        
        if (!_availableEntityTypes.Contains(SelectedType))
            SelectedType = _availableEntityTypes.First();
        
        _countToCreate.Clear();
        foreach (var availableEntity in _availableEntityTypes)
        {
            _countToCreate.Add(availableEntity.FullName, availableEntity.Defaults.NewCount);
        }
    }

    private void CreatedDefaultEntities()
    {
        foreach (var availableEntity in _availableEntityTypes)
        {
            if (availableEntity.Defaults.InitialCount > 0)
                CreateEntity(availableEntity.FullName, availableEntity.Defaults.InitialCount);
        }
    }

    private void TryCreatePondManager()
    {
        if (_manager != null || _engine == null || _canvas == null || _ideElement == null) return;
        
        _manager = new(_engine, _canvas, _ideElement);
    }

    private void CreateEntity(string fullName, int? count = null)
    {
        count ??= _countToCreate[fullName];
        for (var i = 0; i < count; i++) 
            RealCreateEntity(fullName);
    }
    
    private async ValueTask ResetPondManager()
    {
        _manager?.Dispose();
        _manager = null;
        await SetSize();
        _engine = new(_pondWidth, _pondHeight);
        TryCreatePondManager();
        StartPond();
    }
    
    private void RealCreateEntity(string fullName)
    {
        _manager.InitializeAndCreateEntity(_ideElement.CreateInstance<Entity>(fullName), EntityOptions.Default);
    }

    private async Task GetExampleScripts()
    {
        await _ideElement.GetExampleScripts();
        await CompileSource();
    }

    private async Task CompileSource()
    {
        _display = DisplayType.Initializing;
        await Task.Delay(50);
        Reset();

        try
        {
            _output = "Compiling";
            _errors.Clear();
            StateHasChanged();
            await Task.Delay(TimeSpan.FromMilliseconds(100)).ConfigureAwait(false);
            await _ideElement.TriggerSave().ConfigureAwait(false);
            await _ideElement.Compile().ConfigureAwait(false);
            ReadAssemblyInfo();
            StartPond();
            _display = DisplayType.Pond;
            CreatedDefaultEntities();
            StateHasChanged();
        }
        catch (CompileException e)
        {
            _display = DisplayType.Ide;
            _errors = e.Errors.ToList();
            _output = "Compilation Failure";
            StateHasChanged();
        }
        catch (Exception e)
        {
            _errors = new List<string>(new[] {e.Message});
            _output = "Unknown Failure";
            StateHasChanged();
        }
    }

    private void StartPond()
    {
        if (_manager is null) return;
        _manager.Start();
        _debugUpdateTimer.Start();
        _output = "Running";
    }

    private void StopPond()
    {
        if (_manager is null) return;
        _manager.Stop();
        _debugUpdateTimer.Stop();
        _output = "Running";
    }

    private void Reset()
    {
        foreach (var instance in _engine.Entities)
        {
            _canvas.DestroyEntity(instance.Id);
        }
        _canvas.Clear();
        _engine.ClearAllEntities();
    }

    public class AvailableEntityEntry
    {
        public string FullName;
        public string ShortName;
        public Type Type;
        public PondDefaultsAttribute Defaults;
        public List<AdjustableEntry> Adjustables;
    }

    public class AdjustableEntry
    {
        public PropertyInfo PropertyInfo;
        public PondAdjustableAttribute Attribute;

        public Type Type => PropertyInfo.PropertyType;
        public string Name => Attribute.Name ?? PropertyInfo.Name;

        public string ValueAsColorString
        {
            get => "#" + ValueAsInt.ToString("x8")[2..];
            set => ValueAsInt = int.Parse("FF" + value.TrimStart('#'), NumberStyles.HexNumber);
        }
        
        public int ValueAsInt
        {
            get => (int)PropertyInfo.GetValue(null)!;
            set => PropertyInfo.SetValue(null, value);
        }
        
        public double ValueAsDouble
        {
            get => (double)PropertyInfo.GetValue(null)!;
            set => PropertyInfo.SetValue(null, value);
        }
    }

    private class JsInterface
    {
        private readonly Func<ValueTask> _windowResized;
        
        public JsInterface(Func<ValueTask> windowResized)
        {
            _windowResized = windowResized;
        }
        
        [JSInvokable]
        public async ValueTask OnWindowResized() => await _windowResized();
    }

}
