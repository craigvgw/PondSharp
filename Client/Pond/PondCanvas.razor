@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Runtime.InteropServices
@inject IJSRuntime JsRuntime;

<div @ref="_pondHolder" class="border border-light" style="width: @(Width * GridSize + 2)px; height: @(Height * GridSize + 2)px; padding: 0"></div>

@code {
    private IJSInProcessRuntime Js => (IJSInProcessRuntime) JsRuntime;
    private Microsoft.JSInterop.WebAssembly.WebAssemblyJSRuntime JsRaw => (Microsoft.JSInterop.WebAssembly.WebAssemblyJSRuntime) JsRuntime;
    
    [Parameter][Required]
    public int Width { get; set; }
    
    [Parameter][Required]
    public int Height { get; set; }
    
    [Parameter][Required]
    public int GridSize { get; set; }

    public event EventHandler<ClickArgs> OnClick;

    private string _id = string.Empty;
    private ElementReference _pondHolder;
    private string Method(string method) => $"ponds.{_id}.{method}";
    private ChangeRequestQueue<EntityChangeRequest> _changeQueue;

    protected override void OnInitialized()
    {
        _changeQueue = new(WriteQueue);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jsInterface = new JsInterface(EmitOnClick);
            _id = await JsRuntime.InvokeAsync<string>("createPond", DotNetObjectReference.Create(jsInterface), _pondHolder, Width, Height, GridSize);
        }
    }

    private void EmitOnClick(int x, int y) => 
        OnClick?.Invoke(this, new(x, y));

    public void CreateEntity(int entityId, int x, int y, int color) => 
        Js.InvokeVoid(Method("createEntity"), entityId, x, y, color);

    public void DestroyEntity(int entityId) =>
        Js.InvokeVoid(Method("destroyEntity"), entityId);

    public void MoveEntity(int entityId, int x, int y) => 
        _changeQueue.Next().ForPosition(entityId, x, y);

    public void ChangeEntityColor(int entityId, int color) => 
        _changeQueue.Next().ForColor(entityId, color);

    public ValueTask Start() =>
        JsRuntime.InvokeVoidAsync(Method("start"));
    
    public ValueTask Stop() =>
        JsRuntime.InvokeVoidAsync(Method("stop"));

    private void WriteQueue(IReadOnlyCollection<EntityChangeRequest> queue) => 
        JsRaw.InvokeUnmarshalled<IReadOnlyCollection<EntityChangeRequest>, bool>(Method("processEntityChangeRequestsRaw"), queue);

    public void FlushChangeQueue() => _changeQueue.Flush();

    public void Clear() =>
    // TODO make this clear entities too
        _changeQueue.Reset();

    private class JsInterface
    {
        Action<int, int> _onClickHandler;

        public JsInterface(Action<int, int> onClickHandler)
        {
            _onClickHandler = onClickHandler;
        }
        
        [JSInvokable]
        public void OnClick(int x, int y) => _onClickHandler(x, y);
    }

    public class ClickArgs : EventArgs
    {
        public int X { get; }
        public int Y { get; }
        
        public ClickArgs(int x, int y)
        {
            X = x;
            Y = y;
        }
    }
}