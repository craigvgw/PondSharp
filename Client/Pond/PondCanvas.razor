@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JsRuntime;

<div @ref="_pondHolder" style="width: @(Width * GridSize)px; height: @(Height * GridSize)px; padding: 0"></div>

@code {
    private const int QueueLength = 50;
    
    [Parameter][Required]
    public int Width { get; set; }
    
    [Parameter][Required]
    public int Height { get; set; }
    
    [Parameter][Required]
    public int GridSize { get; set; }

    private string _id = string.Empty;
    private ElementReference _pondHolder;
    private string Method(string method) => $"ponds.{_id}.{method}";
    
    private int _lastChangeRequestIndex = 0;
    private EntityChangeRequest[] _entityChangeRequests = new EntityChangeRequest[QueueLength];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _entityChangeRequests.Initialize();
        if (firstRender)
        {
            _id = await JsRuntime.InvokeAsync<string>("createPond", _pondHolder, Width, Height, GridSize);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync(Method("resize"), Width, Height, GridSize);
        }
    }
    
    public ValueTask CreateEntity(string entityId, int x, int y, int color) => 
        JsRuntime.InvokeVoidAsync(Method("createEntity"), entityId, x, y, color);

    public ValueTask DestroyEntity(string entityId) =>
        JsRuntime.InvokeVoidAsync(Method("destroyEntity"), entityId);

    public ValueTask MoveEntity(string entityId, int x, int y) =>
        JsRuntime.InvokeVoidAsync(Method("moveEntity"), entityId, x, y);

    public void QueueMoveEntity(string entityId, int x, int y) =>
        QueueChangeRequest(entityId, x, y);

    public void QueueChangeEntityColor(string entityId, int color) =>
        QueueChangeRequest(entityId, color: color);

    private void QueueChangeRequest(string entityId, int? x = null, int? y = null, int? color = null)
    {
        _lastChangeRequestIndex++;
        _entityChangeRequests[_lastChangeRequestIndex].EntityId = entityId;
        _entityChangeRequests[_lastChangeRequestIndex].X = x;
        _entityChangeRequests[_lastChangeRequestIndex].Y = y;
        _entityChangeRequests[_lastChangeRequestIndex].Color = color;
        if (_lastChangeRequestIndex == QueueLength - 1) 
            FlushChangeQueue();
    }

    public ValueTask Start() =>
        JsRuntime.InvokeVoidAsync(Method("start"));
    
    public ValueTask Stop() =>
        JsRuntime.InvokeVoidAsync(Method("stop"));

    public void ClearChangeQueue() => _lastChangeRequestIndex = -1;

    public void FlushChangeQueue()
    {
        if (_lastChangeRequestIndex == -1) return;
        try
        {
            ((IJSInProcessRuntime)JsRuntime).InvokeVoid(Method("processEntityChangeRequests"), _entityChangeRequests.Segment(0, _lastChangeRequestIndex + 1));
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        _lastChangeRequestIndex = -1;
    }
        
        
    // ReSharper disable InconsistentNaming ClassNeverInstantiated.Local UnusedAutoPropertyAccessor.Global ClassNeverInstantiated.Global
#pragma warning disable 649
    public struct XY
    {
        public int x { get; set; }
        public int y { get; set; }
    }

    private struct EntityChangeRequest
    {
        public string EntityId { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
        public int? Color { get; set; }
    }
#pragma warning restore 649
    // ReSharper restore InconsistentNaming ClassNeverInstantiated.Local UnusedAutoPropertyAccessor.Global ClassNeverInstantiated.Global

    

}