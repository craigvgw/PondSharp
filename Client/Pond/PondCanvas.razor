@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Runtime.InteropServices
@inject IJSRuntime JsRuntime;

<div @ref="_pondHolder" style="width: @(Width * GridSize)px; height: @(Height * GridSize)px; padding: 0"></div>

@code {
    private const int QueueLength = 500;

    private IJSInProcessRuntime Js => (IJSInProcessRuntime) JsRuntime;
    private Microsoft.JSInterop.WebAssembly.WebAssemblyJSRuntime JsRaw => (Microsoft.JSInterop.WebAssembly.WebAssemblyJSRuntime) JsRuntime;
    
    [Parameter][Required]
    public int Width { get; set; }
    
    [Parameter][Required]
    public int Height { get; set; }
    
    [Parameter][Required]
    public int GridSize { get; set; }

    private string _id = string.Empty;
    private ElementReference _pondHolder;
    private string Method(string method) => $"ponds.{_id}.{method}";
    
    private int _currentChangeRequestIndex = -1;
    private int CurrentChangeRequestsCount => _currentChangeRequestIndex + 1;
    private EntityChangeRequest[] _entityChangeRequests = new EntityChangeRequest[QueueLength];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _id = await JsRuntime.InvokeAsync<string>("createPond", _pondHolder, Width, Height, GridSize);
        }
    }
    
    public void CreateEntity(int entityId, int x, int y, int color) => 
        Js.InvokeVoid(Method("createEntity"), entityId, x, y, color);

    public void DestroyEntity(int entityId) =>
        Js.InvokeVoid(Method("destroyEntity"), entityId);

    public void MoveEntity(int entityId, int x, int y)
    {
        _currentChangeRequestIndex++;
        ref var changeReq = ref _entityChangeRequests[_currentChangeRequestIndex];
        changeReq.EntityId = entityId;
        changeReq.Type = EntityChangeRequestType.Position;
        changeReq.X = x;
        changeReq.Y = y;
        if (CurrentChangeRequestsCount == QueueLength)
            FlushChangeQueue();
    }

    public void ChangeEntityColor(int entityId, int color)
    {
        _currentChangeRequestIndex++;
        ref var changeReq = ref _entityChangeRequests[_currentChangeRequestIndex];
        changeReq.EntityId = entityId;
        changeReq.Type = EntityChangeRequestType.Color;
        changeReq.Color = color;
        if (CurrentChangeRequestsCount == QueueLength - 1)
            FlushChangeQueue();
    }

    public ValueTask Start() =>
        JsRuntime.InvokeVoidAsync(Method("start"));
    
    public ValueTask Stop() =>
        JsRuntime.InvokeVoidAsync(Method("stop"));

    public void ClearChangeQueue()
    {
        for (var i = 0; i <= _currentChangeRequestIndex; i++) _entityChangeRequests[i].Type = EntityChangeRequestType.None;
        _currentChangeRequestIndex = -1;
    }

    public void FlushChangeQueue()
    {
        if (_currentChangeRequestIndex == -1) return;
        
        JsRaw.InvokeUnmarshalled<EntityChangeRequest[], bool>(Method("processEntityChangeRequestsRaw"), _entityChangeRequests);

        for (var i = 0; i <= _currentChangeRequestIndex; i++) _entityChangeRequests[i].Type = EntityChangeRequestType.None;
        _currentChangeRequestIndex = -1;
    }
    
    private enum EntityChangeRequestType
    {
        None = 0,
        Position = 1,
        Color = 2,
    }
    
    [StructLayout(LayoutKind.Explicit, Pack = 16, Size = 16)]
    private struct EntityChangeRequest
    {
        [FieldOffset(0)] public int EntityId;
        [FieldOffset(4)] public EntityChangeRequestType Type;
        
        [FieldOffset(8)] public int X;
        [FieldOffset(12)] public int Y;
        
        [FieldOffset(8)] public int Color;
    }
}