@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JsRuntime;

<div @ref="_pondHolder" style="width: @(Width * GridSize); height: @(Height * GridSize); padding: 0"></div>

@code {
    [Parameter][Required]
    public int Width { get; set; }
    
    [Parameter][Required]
    public int Height { get; set; }
    
    [Parameter][Required]
    public int GridSize { get; set; }

    private string _id;
    private ElementReference _pondHolder;
    private string Method(string method) => $"ponds.{_id}.{method}";
    
    private List<EntityChangeRequest> _pendingChangeRequests = new List<EntityChangeRequest>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _id = await JsRuntime.InvokeAsync<string>("createPond", _pondHolder, Width, Height, GridSize);
        }
    }
    
    public ValueTask CreateEntity(string entityId, int x, int y, int color) => 
        JsRuntime.InvokeVoidAsync(Method("createEntity"), entityId, x, y, color);

    public ValueTask DestroyEntity(string entityId) =>
        JsRuntime.InvokeVoidAsync(Method("destroyEntity"), entityId);

    public ValueTask MoveEntity(string entityId, int x, int y) =>
        JsRuntime.InvokeVoidAsync(Method("moveEntity"), entityId, x, y);

    public void QueueMoveEntity(string entityId, int x, int y) =>
        _pendingChangeRequests.Add(new EntityChangeRequest
        {
            EntityId = entityId,
            X = x,
            Y = y
        });

    public void QueueChangeEntityColor(string entityId, int color) =>
        _pendingChangeRequests.Add(new EntityChangeRequest
        {
            EntityId = entityId,
            Color = color
        });

    public ValueTask Start() =>
        JsRuntime.InvokeVoidAsync(Method("start"));
    
    public ValueTask Stop() =>
        JsRuntime.InvokeVoidAsync(Method("stop"));

    public void FlushChangeQueue()
    {
        if (_pendingChangeRequests.Count == 0) return;
        try
        {
            ((IJSInProcessRuntime)JsRuntime).InvokeVoid(Method("processEntityChangeRequests"), _pendingChangeRequests);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        _pendingChangeRequests.Clear();
    }
        
        
    // ReSharper disable InconsistentNaming ClassNeverInstantiated.Local UnusedAutoPropertyAccessor.Global ClassNeverInstantiated.Global
#pragma warning disable 649
    public struct XY
    {
        public int x { get; set; }
        public int y { get; set; }
    }

    public struct EntityChangeRequest
    {
        public string EntityId { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
        public int? Color { get; set; }
    }
#pragma warning restore 649
    // ReSharper restore InconsistentNaming ClassNeverInstantiated.Local UnusedAutoPropertyAccessor.Global ClassNeverInstantiated.Global

}