@using System.Text
@using PondSharp.UserScripts
@using System.Reflection
<!-- ReSharper disable once InconsistentNaming -->
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http

<div class="editor-files">
    <div class="btn-group btn-group-sm top-tabs">
        @foreach (var name in SourceNames)
        {
            <button class="btn @(_selectedSource == name ? "btn-primary" : "btn-secondary")" @onclick="e => SelectSource(name)">
                @name
            </button>
            
            <div class="btn-group-vertical @(_selectedSource == name ? "bg-primary" : "bg-secondary")">
                <button class="btn btn-icon @(_selectedSource == name ? "btn-primary" : "btn-secondary")" @onclick="e => RenameScript(name)">
                    <span class="oi oi-wrench" title="Rename" aria-hidden="true"></span>
                </button>
                <button class="btn btn-icon @(_selectedSource == name ? "btn-primary" : "btn-secondary")" @onclick="e => DeleteScript(name)">
                    <span class="oi oi-circle-x" title="Delete" aria-hidden="true"></span>
                </button>
            </div>
        }
        <button class="btn btn-success" @onclick="NewSource">+</button>
    </div>
</div>
@if(_editorPromptType != EditorPromptType.None)
{
    <div class="editor-prompt">
        @if (_editorPromptType == EditorPromptType.Delete)
        {
            <div class="btn-group">
                <button class="btn btn-danger" @onclick="SaveEditorPrompt">Confirm</button>
                <button class="btn btn-warning" @onclick="CancelEditorPrompt">Cancel</button>
            </div>
        }
        @if (_editorPromptType == EditorPromptType.Add || _editorPromptType == EditorPromptType.Rename)
        {
            <div class="input-group" style="max-width: 400px">
                <input class="form-control" @bind="_editorPromptName" onkeyup="const e=document.createEvent('HTMLEvents'); e.initEvent('change', false, true);this.dispatchEvent(e)" />
                <div class="input-group-append">
                    <span class="input-group-text">.cs</span>
                </div>
                <div class="input-group-append">
                    <button class="btn btn-success" @onclick="SaveEditorPrompt" disabled="@(_editorPromptName == _renameScriptOriginalName)">Save</button>
                    <button class="btn btn-warning" @onclick="CancelEditorPrompt">Cancel</button>
                </div>
            </div>
        }
        @if (_editorPromptError != string.Empty)
        {
            <div class="alert alert-warning">@_editorPromptError</div>
        }
    </div>
}
<div id="code-editor" class="w-auto" style="min-height: 500px; height: calc(100vh - 180px)"></div>
<div>PondSharp.UserScripts Version: <span>@UserScriptsVersion</span></div>

@code {
    
    private CSharpClassCompiler _compiler;
    private Dictionary<string, string> _sources = new Dictionary<string, string>();
    private string _selectedSource = string.Empty;
    private enum EditorPromptType {None, Delete, Add, Rename};
    private EditorPromptType _editorPromptType = EditorPromptType.None;
    private string _editorPromptName = string.Empty;
    private string _renameScriptOriginalName = string.Empty;
    private string _editorPromptError = string.Empty;

    public Task TriggerSave() => SaveSource();
    public bool IsCompiled => _compiler?.HasAssembly ?? false;
    private IEnumerable<string> SourceNames => _sources.Keys.OrderBy(s => s);
    private IEnumerable<(string path, string source)> Sources => _sources.Select(s => (s.Key, s.Value));
    private string UserScriptsVersion => Assembly
        .GetAssembly(typeof(IAbstractEntity))
        .GetName().Version.ToString();
    
    private string FullEditorPromptName
    {
        get => $"{_editorPromptName}.cs";
        set {
            if (!value.EndsWith(".cs")) throw new ArgumentException($"{nameof(value)} must end with .cs");
            _editorPromptName = value.Substring(0, value.Length - 3);
        }
    }
    
    public async Task GetExampleScripts()
    {
        _sources.Clear();
        await LocalStorage.ClearAsync().ConfigureAwait(false);
        await ReadSources().ConfigureAwait(false);
    }

    public IEnumerable<(string fullName, string name)> GetTypesOf(Type type) =>
        _compiler
            .AvailableInstances(type)
            .Select(t => (t, t.Split('.').Last()));

    public T CreateInstance<T>(string fullName) where T : class =>
        _compiler.New<T>(fullName);
    
    public async Task Compile()
    {
        await SaveSource().ConfigureAwait(false);
        _compiler.Compile(Sources);
    }
    
    protected override async Task OnInitializedAsync()
    {
        var types = new List<Type>
        {
            typeof(object),
            typeof(AbstractEntity),
            typeof(System.Drawing.Color),
            typeof(Enumerable)
        };
        _compiler = await CSharpClassCompiler.Make(types, Http.BaseAddress).ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await CreateEditor().ConfigureAwait(false);
    }
    
    private void NewSource()
    {
        _editorPromptName = string.Empty;
        _editorPromptType = EditorPromptType.Add;
    }

    private void CancelEditorPrompt()
    {
        _editorPromptType = EditorPromptType.None;
        _editorPromptName = string.Empty;
        _editorPromptError = string.Empty;
    }

    private void RenameScript(string name)
    {
        FullEditorPromptName = name;
        _renameScriptOriginalName = name;
        _editorPromptType = EditorPromptType.Rename;
    }

    private void DeleteScript(string name)
    {
        FullEditorPromptName = name;
        _editorPromptType = EditorPromptType.Delete;
    }

    private async Task SaveEditorPrompt()
    {
        switch (_editorPromptType)
        {
            case EditorPromptType.None:
                throw new InvalidOperationException("Can't save a prompt of None type");   
            case EditorPromptType.Delete:
                _sources.Remove(FullEditorPromptName);
                if (_selectedSource == FullEditorPromptName && _sources.Count > 0) 
                    await SelectSource(SourceNames.First(), _selectedSource != FullEditorPromptName).ConfigureAwait(false);
                await WriteAllSources().ConfigureAwait(false);
                _editorPromptType = EditorPromptType.None;
                StateHasChanged();
                break;
            case EditorPromptType.Add:
                if (_editorPromptName == string.Empty)
                {
                    _editorPromptError = "Name cannot be empty";
                    break;
                }
                if (SourceNames.Contains(FullEditorPromptName))
                {
                    _editorPromptError = $"{FullEditorPromptName} already exists";
                }
                _sources.Add(FullEditorPromptName, "using PondSharp.UserScripts;\n\n\nnamespace PondSharp.Examples {\n\n\n}");
                await SelectSource(FullEditorPromptName).ConfigureAwait(false);
                await WriteAllSources().ConfigureAwait(false);
                CancelEditorPrompt();
                StateHasChanged();
                break;
            case EditorPromptType.Rename:
                if (_editorPromptName == string.Empty)
                {
                    _editorPromptError = "Name cannot be empty";
                    break;
                }
                if (SourceNames.Contains(FullEditorPromptName))
                {
                    _editorPromptError = $"{FullEditorPromptName} already exists";
                    break;
                }
                if (_selectedSource == _renameScriptOriginalName)
                    await SaveSource().ConfigureAwait(false);
                _sources.Add(FullEditorPromptName, _sources[_renameScriptOriginalName]);
                _sources.Remove(_renameScriptOriginalName);
                if (_selectedSource == _renameScriptOriginalName)
                    await SelectSource(FullEditorPromptName, false).ConfigureAwait(false);
                await WriteAllSources().ConfigureAwait(false);
                CancelEditorPrompt();
                StateHasChanged();
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
    
    private async Task CreateEditor()
    {
        await JSRuntime.InvokeVoidAsync("createEditor", "code-editor", "codeEditor").ConfigureAwait(false);
        await ReadSources().ConfigureAwait(false);
        await SelectSource(_sources.First().Key).ConfigureAwait(false);
        StateHasChanged();
    }

    private async Task SaveSource()
    {
        _sources[_selectedSource] = await JSRuntime.InvokeAsync<string>("codeEditor.getCode").ConfigureAwait(false);
        await WriteAllSources().ConfigureAwait(false);
    }

    private ValueTask WriteAllSources() => LocalStorage.SetItemAsync(_savedScriptsKey, _sources.Select(s => new SavedSource
    {
        Name = s.Key,
        Source = s.Value
    }));

    private async Task FetchExampleSources()
    {
        var sourceFiles = new []
        {
            "BaseEntity.cs",
            "Rand.cs",
            "Clustering.cs",
            "Simple.cs",
            "Cooperative.cs"
        };
        _sources.Clear();
        foreach (var sourceFile in sourceFiles)
        {
            var code = await Http.GetStringAsync($"user-scripts/{sourceFile}.txt").ConfigureAwait(false);
            _sources.Add(sourceFile, code);
        }
    }

    private string _savedScriptsKey => $"saved_scripts:{UserScriptsVersion}";
    private async Task ReadSources()
    {
        var hasLocalScripts = await LocalStorage.ContainKeyAsync(_savedScriptsKey).ConfigureAwait(false);
        if (hasLocalScripts)
        {
            var sources = await LocalStorage.GetItemAsync<SavedSource[]>(_savedScriptsKey).ConfigureAwait(false);
            _sources = sources.ToDictionary(s => s.Name, s => s.Source);
        }
        if (_sources.Count == 0)
        {
            await FetchExampleSources().ConfigureAwait(false);
        }
        StateHasChanged();
    } 
    
    private async Task SelectSource(string source, bool save = true)
    {
        if (_selectedSource != string.Empty && save) await SaveSource();
        _selectedSource = source;
        await JSRuntime.InvokeVoidAsync("codeEditor.setCode", _sources[source]).ConfigureAwait(false);
    }
    
    private struct SavedSource
    {
        public string Name { get; set; }
        public string Source { get; set; }
    }
}